{"ast":null,"code":"'use strict'; // Encode each item of an array individually. The comma\n// delimiters should not themselves be encoded.\n\nfunction encodeArray(arrayValue) {\n  return arrayValue.map(encodeURIComponent).join(',');\n}\n\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    return encodeArray(value);\n  }\n\n  return encodeURIComponent(String(value));\n}\n/**\n * Append a query parameter to a URL.\n *\n * @param {string} url\n * @param {string} key\n * @param {string|number|boolean|Array<*>>} [value] - Provide an array\n *   if the value is a list and commas between values need to be\n *   preserved, unencoded.\n * @returns {string} - Modified URL.\n */\n\n\nfunction appendQueryParam(url, key, value) {\n  if (value === false || value === null) {\n    return url;\n  }\n\n  var punctuation = /\\?/.test(url) ? '&' : '?';\n  var query = encodeURIComponent(key);\n\n  if (value !== undefined && value !== '' && value !== true) {\n    query += '=' + encodeValue(value);\n  }\n\n  return '' + url + punctuation + query;\n}\n/**\n * Derive a query string from an object and append it\n * to a URL.\n *\n * @param {string} url\n * @param {Object} [queryObject] - Values should be primitives.\n * @returns {string} - Modified URL.\n */\n\n\nfunction appendQueryObject(url, queryObject) {\n  if (!queryObject) {\n    return url;\n  }\n\n  var result = url;\n  Object.keys(queryObject).forEach(function (key) {\n    var value = queryObject[key];\n\n    if (value === undefined) {\n      return;\n    }\n\n    if (Array.isArray(value)) {\n      value = value.filter(function (v) {\n        return v !== null && v !== undefined;\n      }).join(',');\n    }\n\n    result = appendQueryParam(result, key, value);\n  });\n  return result;\n}\n/**\n * Prepend an origin to a URL. If the URL already has an\n * origin, do nothing.\n *\n * @param {string} url\n * @param {string} origin\n * @returns {string} - Modified URL.\n */\n\n\nfunction prependOrigin(url, origin) {\n  if (!origin) {\n    return url;\n  }\n\n  if (url.slice(0, 4) === 'http') {\n    return url;\n  }\n\n  var delimiter = url[0] === '/' ? '' : '/';\n  return '' + origin.replace(/\\/$/, '') + delimiter + url;\n}\n/**\n * Interpolate values into a route with express-style,\n * colon-prefixed route parameters.\n *\n * @param {string} route\n * @param {Object} [params] - Values should be primitives\n *   or arrays of primitives. Provide an array if the value\n *   is a list and commas between values need to be\n *   preserved, unencoded.\n * @returns {string} - Modified URL.\n */\n\n\nfunction interpolateRouteParams(route, params) {\n  if (!params) {\n    return route;\n  }\n\n  return route.replace(/\\/:([a-zA-Z0-9]+)/g, function (_, paramId) {\n    var value = params[paramId];\n\n    if (value === undefined) {\n      throw new Error('Unspecified route parameter ' + paramId);\n    }\n\n    var preppedValue = encodeValue(value);\n    return '/' + preppedValue;\n  });\n}\n\nmodule.exports = {\n  appendQueryObject: appendQueryObject,\n  appendQueryParam: appendQueryParam,\n  prependOrigin: prependOrigin,\n  interpolateRouteParams: interpolateRouteParams\n};","map":{"version":3,"names":["encodeArray","arrayValue","map","encodeURIComponent","join","encodeValue","value","Array","isArray","String","appendQueryParam","url","key","punctuation","test","query","undefined","appendQueryObject","queryObject","result","Object","keys","forEach","filter","v","prependOrigin","origin","slice","delimiter","replace","interpolateRouteParams","route","params","_","paramId","Error","preppedValue","module","exports"],"sources":["D:/Github/mobx/multiple-mobx/node_modules/@mapbox/mapbox-sdk/lib/helpers/url-utils.js"],"sourcesContent":["'use strict';\n\n// Encode each item of an array individually. The comma\n// delimiters should not themselves be encoded.\nfunction encodeArray(arrayValue) {\n  return arrayValue.map(encodeURIComponent).join(',');\n}\n\nfunction encodeValue(value) {\n  if (Array.isArray(value)) {\n    return encodeArray(value);\n  }\n  return encodeURIComponent(String(value));\n}\n\n/**\n * Append a query parameter to a URL.\n *\n * @param {string} url\n * @param {string} key\n * @param {string|number|boolean|Array<*>>} [value] - Provide an array\n *   if the value is a list and commas between values need to be\n *   preserved, unencoded.\n * @returns {string} - Modified URL.\n */\nfunction appendQueryParam(url, key, value) {\n  if (value === false || value === null) {\n    return url;\n  }\n  var punctuation = /\\?/.test(url) ? '&' : '?';\n  var query = encodeURIComponent(key);\n  if (value !== undefined && value !== '' && value !== true) {\n    query += '=' + encodeValue(value);\n  }\n  return '' + url + punctuation + query;\n}\n\n/**\n * Derive a query string from an object and append it\n * to a URL.\n *\n * @param {string} url\n * @param {Object} [queryObject] - Values should be primitives.\n * @returns {string} - Modified URL.\n */\nfunction appendQueryObject(url, queryObject) {\n  if (!queryObject) {\n    return url;\n  }\n\n  var result = url;\n  Object.keys(queryObject).forEach(function(key) {\n    var value = queryObject[key];\n    if (value === undefined) {\n      return;\n    }\n    if (Array.isArray(value)) {\n      value = value\n        .filter(function(v) {\n          return v !== null && v !== undefined;\n        })\n        .join(',');\n    }\n    result = appendQueryParam(result, key, value);\n  });\n  return result;\n}\n\n/**\n * Prepend an origin to a URL. If the URL already has an\n * origin, do nothing.\n *\n * @param {string} url\n * @param {string} origin\n * @returns {string} - Modified URL.\n */\nfunction prependOrigin(url, origin) {\n  if (!origin) {\n    return url;\n  }\n\n  if (url.slice(0, 4) === 'http') {\n    return url;\n  }\n\n  var delimiter = url[0] === '/' ? '' : '/';\n  return '' + origin.replace(/\\/$/, '') + delimiter + url;\n}\n\n/**\n * Interpolate values into a route with express-style,\n * colon-prefixed route parameters.\n *\n * @param {string} route\n * @param {Object} [params] - Values should be primitives\n *   or arrays of primitives. Provide an array if the value\n *   is a list and commas between values need to be\n *   preserved, unencoded.\n * @returns {string} - Modified URL.\n */\nfunction interpolateRouteParams(route, params) {\n  if (!params) {\n    return route;\n  }\n  return route.replace(/\\/:([a-zA-Z0-9]+)/g, function(_, paramId) {\n    var value = params[paramId];\n    if (value === undefined) {\n      throw new Error('Unspecified route parameter ' + paramId);\n    }\n    var preppedValue = encodeValue(value);\n    return '/' + preppedValue;\n  });\n}\n\nmodule.exports = {\n  appendQueryObject: appendQueryObject,\n  appendQueryParam: appendQueryParam,\n  prependOrigin: prependOrigin,\n  interpolateRouteParams: interpolateRouteParams\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}