map.addSource('district-source', {
	type: 'geojson',
	data: mnDistricts
});

map.addLayer({
	id: 'district-layer',
	type: 'fill',
	source: 'district-source',
	layout: {},
	paint: {
		'fill-color': [
			'match',
			['get', 'CD116FP'],
			'01',
			'#5AA5D7',
			'02',
			'#02735E',
			'03',
			'#00E0EF',
			'04',
			'#84D0D9',
			'05',
			'#202359',
			'06',
			'#CE7529',
			'07',
			'#00AE6C',
			'08',
			'#0056A3',
			/* other */ '#ffffff'
		],
		'fill-opacity': ['case', ['boolean', ['feature-state', 'hover'], false], 0.8, 0.5]
	}
});

map.on('mousemove', 'district-layer', function (e) {
	if (e.features.length > 0) {
		if (hoveredDistrictRef.current && hoveredDistrictRef.current > -1) {
			map.setFeatureState(
				{source: 'district-source', id: hoveredDistrictRef.current},
				{hover: false}
			);
		}

		const _hoveredDistrict = e.features[0].id;

		map.setFeatureState({source: 'district-source', id: _hoveredDistrict}, {hover: true});

		setHoveredDistrict(_hoveredDistrict);
	}
});
// When the mouse leaves the state-fill layer, update the feature state of the
// previously hovered feature.
map.on('mouseleave', 'district-layer', function () {
	if (hoveredDistrictRef.current) {
		map.setFeatureState(
			{source: 'district-source', id: hoveredDistrictRef.current},
			{hover: false}
		);
	}
	setHoveredDistrict(null);
});
map.on('click', function (e) {
	useStores.arrMarker.map((ele) => ele.remove(map));
	const a = new mapboxgl.Marker(e).setLngLat(e.lngLat);
	a.addTo(map);
	useStores.arrMarker.push(a);
	var feature = features[0];
	console.log(feature);
	new mapboxgl.Popup({offset: [0, -15]})
		.setLngLat(feature.geometry.coordinates)
		.setHTML('<h3>' + feature.properties.title + 'abc' + '</h3>')
		.addTo(map);
});

map.on('mouseenter', 'circle', () => {
	map.getCanvas().style.cursor = 'pointer';
});

map.on('mouseleave', 'circle', () => {
	map.getCanvas().style.cursor = '';
});

const setHoveredDistrict = (data: any) => {
	hoveredDistrictRef.current = data;
	_setHoveredDistrict(data);
};
  const hoveredDistrictRef = useRef(hoveredDistrict);
    const [hoveredDistrict, _setHoveredDistrict] = useState(null);
 map.on("mousemove", (e: any) => {
            const features = map.queryRenderedFeatures(e.point);
            if (features.length) {
                const feature = features[0];

                const tooltipNode = document.createElement("div");
                ReactDOM.render(<Tooltip feature={feature} />, tooltipNode);

                tooltipRef.current
                    .setLngLat(e.lngLat)
                    .setDOMContent(tooltipNode)
                    .addTo(map);
            }
        });
{
  "TemplateName": "string",
  "Path": "string",
  "LayerData": { "Title": "Test_data",
    "Description": "Test_data",
    "geo": "{\"type\":\"Point\",\"coordinates\":[106.50472374999998,11.741799732065971]}"}
}

# ------new-----
  const draw = new MapboxDraw({
            displayControlsDefault: false,
            controls: {
                polygon: true,
                trash: true,
                point: true,
                combine_features: true,
                line_string: true,
            },
            defaultMode: 'draw_polygon'
        });

        // interactive
        map.addControl(new mapboxgl.NavigationControl());
        //search
        map.addControl(
            new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                mapboxgl: mapBoxGl,
                marker: true,
                placeholder: "Give me a text",
                bbox: [140.999326, -37.571471, 159.209167, -28.085795],

            })
        );
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true,
            showUserHeading: true,
            showUserLocation: true
        }));

        map.on("load", () => {

            //line
            //contour default min zoom 9
            map.addLayer({
                id: "biengioi",
                type: "line",
                source: {
                    type: "vector",
                    url: "mapbox://mapbox.mapbox-terrain-v2",
                },
                "source-layer": "contour",
            });
            //add source
            map.addSource("points", {
                type: "geojson",
                data: {
                    type: "FeatureCollection",
                    features: [
                        {
                            type: "Feature",
                            properties: {},
                            geometry: {
                                type: "Point",
                                coordinates: [long, lat],
                            },
                        },
                        {
                            type: "Feature",
                            properties: {},
                            geometry: {
                                type: "Point",
                                coordinates: [-long, -lat],
                            },
                        },
                        {
                            type: "Feature",
                            properties: {},
                            geometry: {
                                type: "Point",
                                coordinates: [-long + 1, lat + 1],
                            },
                        },
                    ],
                },
            });

            map.addLayer({
                metadata: {
                    id: "marker",
                },
                id: "circle",
                type: "circle",
                source: "points",
                paint: {
                    "circle-color": "#4264fb",
                    "circle-radius": 8,
                    "circle-stroke-width": 2,
                    "circle-stroke-color": "#ffffff",
                },
            });
        });
        map.on("click", e => {
            const features = map.queryRenderedFeatures(e.point, {})
            if (features.length > 0) {
                const feature = features[0]
                // create popup node
                const popupNode = document.createElement("div")

                ReactDOM.render(
                    <Popup
                        changeName={changeName}
                        changeDescription={changeDescription}
                    />,
                    popupNode
                )
                popUpRef.current
                    .setLngLat(e.lngLat)
                    .setDOMContent(popupNode)
                    .addTo(map)
            }
        })


        map.on("click", "circle", (e: any) => {
            map.flyTo({
                center: e.features[0].geometry.coordinates,
            });
        });


        ///set sidebar
        map.on("move", () => {
            setLong(parseInt(map.getCenter().lng.toFixed(4)));
            setLat(parseInt(map.getCenter().lat.toFixed(4)));
            setZoom(parseInt(map.getZoom().toFixed(2)));
        });
