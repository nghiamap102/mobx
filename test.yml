map.addSource('district-source', {
	type: 'geojson',
	data: mnDistricts
});

map.addLayer({
	id: 'district-layer',
	type: 'fill',
	source: 'district-source',
	layout: {},
	paint: {
		'fill-color': [
			'match',
			['get', 'CD116FP'],
			'01',
			'#5AA5D7',
			'02',
			'#02735E',
			'03',
			'#00E0EF',
			'04',
			'#84D0D9',
			'05',
			'#202359',
			'06',
			'#CE7529',
			'07',
			'#00AE6C',
			'08',
			'#0056A3',
			/* other */ '#ffffff'
		],
		'fill-opacity': ['case', ['boolean', ['feature-state', 'hover'], false], 0.8, 0.5]
	}
});

map.on('mousemove', 'district-layer', function (e) {
	if (e.features.length > 0) {
		if (hoveredDistrictRef.current && hoveredDistrictRef.current > -1) {
			map.setFeatureState(
				{source: 'district-source', id: hoveredDistrictRef.current},
				{hover: false}
			);
		}

		const _hoveredDistrict = e.features[0].id;

		map.setFeatureState({source: 'district-source', id: _hoveredDistrict}, {hover: true});

		setHoveredDistrict(_hoveredDistrict);
	}
});
// When the mouse leaves the state-fill layer, update the feature state of the
// previously hovered feature.
map.on('mouseleave', 'district-layer', function () {
	if (hoveredDistrictRef.current) {
		map.setFeatureState(
			{source: 'district-source', id: hoveredDistrictRef.current},
			{hover: false}
		);
	}
	setHoveredDistrict(null);
});
map.on('click', function (e) {
	useStores.arrMarker.map((ele) => ele.remove(map));
	const a = new mapboxgl.Marker(e).setLngLat(e.lngLat);
	a.addTo(map);
	useStores.arrMarker.push(a);
	var feature = features[0];
	console.log(feature);
	new mapboxgl.Popup({offset: [0, -15]})
		.setLngLat(feature.geometry.coordinates)
		.setHTML('<h3>' + feature.properties.title + 'abc' + '</h3>')
		.addTo(map);
});

map.on('mouseenter', 'circle', () => {
	map.getCanvas().style.cursor = 'pointer';
});

map.on('mouseleave', 'circle', () => {
	map.getCanvas().style.cursor = '';
});

const setHoveredDistrict = (data: any) => {
	hoveredDistrictRef.current = data;
	_setHoveredDistrict(data);
};
  const hoveredDistrictRef = useRef(hoveredDistrict);
    const [hoveredDistrict, _setHoveredDistrict] = useState(null);
 map.on("mousemove", (e: any) => {
            const features = map.queryRenderedFeatures(e.point);
            if (features.length) {
                const feature = features[0];

                const tooltipNode = document.createElement("div");
                ReactDOM.render(<Tooltip feature={feature} />, tooltipNode);

                tooltipRef.current
                    .setLngLat(e.lngLat)
                    .setDOMContent(tooltipNode)
                    .addTo(map);
            }
        });